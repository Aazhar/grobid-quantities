<text xmlns="http://www.tei-c.org/ns/1.0">
	<p>1 Intelligent Autonomous Systems, TU Darmstadt, Germany calandra@ias.tu-darmstadt.de 2 Inria, Villers-l` es-Nancy, F-<measure type="list">54600, France; CNRS, Loria, UMR n.7503 and Université de Lorraine, Vandoeuvre-l` es-Nancy, F-54500</measure>, France serena.ivaldi@inria.fr Its movement is obstructed by an unexpected obstacle, which decreases the tracking performance of a desired trajectory. We reduce the tracking error by learning the torque control to compensate the contact. This is also true for robots equipped with whole-body distributed tactile sensing, as small errors in the estimation of the contact location can substantially deteriorate the quality of the inverse dynamics estimation [8].</p>
	<p><measure type="value" ptr="#6dd8986a-557b-43f3-bfff-9ecb77bc24af">Two</measure> <quantifiedObject id="6dd8986a-557b-43f3-bfff-9ecb77bc24af">main lines of</quantifiedObject> research are currently addressing this issue. On one side modelbased approaches, which rely on identification techniques to improve the dynamics parameters of the analytic models [9], [10]. On the other side, we have machine learning approaches, where nonparametric models of the robot dynamics can be learned from data collected on the robot [11], [12], [13]. The main advantages of the latter approaches are that they do not usually require a prior calibration (kinematics/dynamics calibration [14] or spatial calibration of the tactile sensors [15]), are less prone to model errors, and can easily deal with noise and varying contexts [11].</p>
	<p>the inputs. Additionally, is an i.i.d. Gaussian measurement noise with <quantifiedObject id="ff2c35ef-5c7e-4a97-ac42-cf6e3864f83a">mean</quantifiedObject> <measure type="value" ptr="#ff2c35ef-5c7e-4a97-ac42-cf6e3864f83a">0</measure> and variance σ 2 n . Therefore, our regression problem becomes</p>
	<p>) and δ pq is the Kronecker delta (which is one if p = q and <measure type="value">zero</measure> otherwise). Here, l i are the characteristic length-scales, σ 2 f is the variance of the latent function f (·) and σ 2 w the noise variance. In our experiments, when learning contact models, the input is defined as X = [q, F ] and the output (observations) is y = τ are the torques. Hence, given n training inputs X = [x 1 , ..., x n ] and corresponding training targets y = [y 1 , ..., y n ], we define the training data set D = {X, y}. Training the GP corresponds to finding good hyperparameters θ = [l i , σ f , σ w ], which can be done by the standard procedure of maximizing the marginal likelihood [21].</p>
	<p>where τ CM is the contribution from the contacts (see Equation (3)), which is estimated using the learned model from Equation (6). In the experimental evaluations presented in the next section we will compare the performance of all these <measure type="value">three</measure> control schema. τ PD drastically decrease when using the learned ID, therefore suggesting that the learned ID model is accurate.</p>
	<p>The experimental evaluations are performed on the iCubDarmstadt01, the most recent version (v. 2.5) of iCub [23]. The iCub has <measure type="value">53 degrees</measure> of freedom and is <measure type="value">104 cm</measure> tall for <measure type="value" ptr="#a923bc79-f321-497d-a29d-6b392b7e0272">24 kg</measure> of weight. The robot is not equipped with joint torque sensors, but it has <measure type="value" ptr="#1b43ad53-3304-47f3-bc2a-b18b53c29d50">four</measure> 6-axis force/<quantifiedObject id="1b43ad53-3304-47f3-bc2a-b18b53c29d50">torque sensors placed</quantifiedObject> proximally in the middle of legs and arms, and an artificial skin consisting of more than <measure type="interval" ptr="#8634638a-6166-4547-bc04-4f65524d8af4">3000</measure> <quantifiedObject id="8634638a-6166-4547-bc04-4f65524d8af4">tactile sensors</quantifiedObject>, mounted on the robot covers [24]. Each of these sensors provide a signal in the interval ∈ [<measure type="interval">0,255</measure>] correlated to the force applied orthogonally to the sensor. In our experiments, we control <measure type="value" ptr="#61392f08-4819-4ec9-8eb9-21544f438adb">4</measure> <quantifiedObject id="61392f08-4819-4ec9-8eb9-21544f438adb">DoF of</quantifiedObject> the iCub arm: shoulder pitch, roll and jaw, and elbow. The skin input s from the forearm consists of <measure type="value" ptr="#1d6b664f-b38f-44b5-971c-96d251f07942">384</measure> <quantifiedObject id="1d6b664f-b38f-44b5-971c-96d251f07942">sensors</quantifiedObject>. In the iCub the joint torques are not estimated by the motors currents, but via an analytic model with identified dynamics parameters [9], which updates the estimation thanks to the inertial, tactile and force/torque measurements [16]. We compute, on a PC outside the robot, the desired joint torques at <quantifiedObject id="73eb742d-b7e7-4379-8937-7a1f65b3fa7f">the frequency of</quantifiedObject> <measure type="value" ptr="#73eb742d-b7e7-4379-8937-7a1f65b3fa7f">50 Hz</measure> and then send the commands to the robot interface Yarp. A low-level controller implemented on the motor boards takes care of tracking the desired joint torques, sent through the robot interface. Both the estimation of the joint torques and the low-lever controller are transparent to our learned model as we use the desired torques (instead of the measured torques) as targets y during the training of the models.</p>
	<p>Before learning the contact models, a pre-requisite of our approach is the existence of a (contact-free) rigid-body inverse dynamics model. In our case, we decided to learn such ID model from scratch using Gaussian Processes. The reason for this choice are the unmodeled dynamics (q, ˙ q, ¨ q), which introduce substantial errors even in absence of contacts. In this subsection we present an experimental validation of the learned (contact-free) inverse dynamics. To validate the learned ID model we firstly compared the tracking error, in absence of obstacles. The task used for the experimental validation of the proposed approach consists of a tracking task with the left arm of the iCub where each of the <measure type="value" ptr="#4c582663-594f-4442-9c3b-fd27dd0b21d2">four</measure> <quantifiedObject id="4c582663-594f-4442-9c3b-fd27dd0b21d2">joints of</quantifiedObject> the arm should follow a pre-designed trajectory. In Table I we collected the tracking errors obtained averaging over <measure type="value" ptr="#a6fb3588-85d7-49e3-86eb-4c6374318b6f">20</measure> <quantifiedObject id="a6fb3588-85d7-49e3-86eb-4c6374318b6f">repetitions</quantifiedObject>. The results shows that the learned ID model reduces the tracking error, compared to the simple PD controller. The visualization of Figure 4 shows the average error tracking for the shoulder jaw. As second comparison we analyzed the contribution to the desired torque from the PD controller τ PD . In Figure 5 it is visible that when using the learned ID model, τ PD is drastically reduced. Both experimental results suggests that the learned ID model is accurate and useful for the desired tracking task.</p>
	<p>For the validation of the inverse dynamics with contacts model we consider the same trajectory tracking task used in the previous evaluation. However, in this experiments we include the presence of a dynamic obstacle, specifically a filled <measure type="value" ptr="#39610baa-507c-4762-8845-99816004efcf">1-liter</measure> <quantifiedObject id="39610baa-507c-4762-8845-99816004efcf">bottle of</quantifiedObject> water. For classical controllers, when an obstruction occur, the rigid body inverse dynamics does not account for this variation. As a result, the tracking error increases and with it also the contribution of the PD feedback controller increases to compensate for this tracking error. In this scenario, we demonstrate that using a learned contact model improves the tracking accuracy when unforeseen and dynamic obstacles are encountered along the path.</p>
	<p>We first performed the tracking experiment (with the obstacle) once using as controller the PD + ID, in order to collect training data. Using these data collected, we trained the contact model using as target the difference between the desired torque and the inverse dynamics model contribution τ ID (we here assume a single contact model). Following, we repeated the experiment comparing the full controller PD + ID + CM, the simple PD, and PD + ID. In Table II are collected the tracking errors for the <measure type="value">three</measure> control schema and for all the <measure type="value" ptr="#041eea00-8599-4299-b4b1-10f930b0040d">four</measure> <quantifiedObject id="041eea00-8599-4299-b4b1-10f930b0040d">joint</quantifiedObject>, averaged over <measure type="value" ptr="#27e688d9-ad84-4605-b596-c39aefd04167">20</measure> <quantifiedObject id="27e688d9-ad84-4605-b596-c39aefd04167">repetitions</quantifiedObject>. The presence of the contact model proved beneficial in terms of tracking error for <measure type="value" ptr="#5ab2af6b-94dd-413b-bbf5-f4d60da2b127">three out of four</measure> <quantifiedObject id="5ab2af6b-94dd-413b-bbf5-f4d60da2b127">joints</quantifiedObject>. For the elbow, the PD +ID performed slightly better. However, it is important to notice that the joints that are most involved in the trajectory are the shoulder pitch and shoulder jaw. In Figure 6 is shows the average tracking error (for the shoulder jaw) for the considered control modes. It is clearly visible that after about <measure type="value" ptr="#c8d2a8fd-4ebc-43c8-93a0-e3fe7fb536d3">1 second</measure> from the contact with the obstacle, the contact model reduce the tracking error. From these results we can conclude that using the additional learned contact model is beneficial. The profile of the average torque contributed by τ CM is shown in Figure 7.</p>
	<p>One limitation of the current results is that the gating network does not always recognize the presence of the contact. This is due to hardware limitations of the iCub skin. In fact, the current skin presents <measure type="value" ptr="#f30ea80a-d487-4088-88b9-e48df7fd438c">two</measure> <quantifiedObject id="f30ea80a-d487-4088-88b9-e48df7fd438c">main issues</quantifiedObject>: 1) high levels of noise. Even without contacts, some sensors will occasionally fire as if in presence of strong forces applied. 2) Mechanical compliance of the skin. When applying a force, The sum of these <measure type="value" ptr="#059cc1ce-b63e-4bbb-b6fc-a4f1566108f8">two</measure> <quantifiedObject id="059cc1ce-b63e-4bbb-b6fc-a4f1566108f8">issues</quantifiedObject> resulted in the introduction of delays for the identification of contacts and therefore the use of the additional contact model. This delay, which we estimate around <measure type="value">500ms</measure> is visible in both Figure 6 and Figure 7. Often even for a human expert it is hard to distinguish between measurement noise and a real contact when observing short (i.e., less than <measure type="interval">100 ms</measure>) windows of data. A second issue we encountered during the training of both inverse dynamics model and contact models, is that the torques applied from the basic PD controller implemented on the iCub suffer from a high noise. As a result of this high degree of noise, we had to filter the desired torques. However, filtering the desired torques inevitably introduce small errors in the models learned. We expect that a smoother desired torques would result in a more accurate learned model and even lower tracking error.</p>
	<p>To analyze the generalization capabilities of a single contact model we experimented the use of obstacles not included in the training data. In a similar manner to the previous experiment we collected data using the PD + ID on <measure type="value" ptr="#48b0e0a1-6018-4662-9e25-cc92e51c11a6">two</measure> <quantifiedObject id="48b0e0a1-6018-4662-9e25-cc92e51c11a6">different obstacles</quantifiedObject>: the <measure type="value" ptr="#1e108d6c-44e0-42e8-88dc-5fc6abb33723">1-liter</measure> <quantifiedObject id="1e108d6c-44e0-42e8-88dc-5fc6abb33723">bottle of</quantifiedObject> water and a bin filled with <measure type="value" ptr="#cd228db6-d6a1-4169-b79c-633760d5808c">2 liters</measure> of water. Using the data collected from both these obstacles we trained the contact model. We tested the resulting learned model on a new obstacle: a bin filled with <measure type="value" ptr="#7d132fdf-b0b6-413e-9e51-f42665fabafd">1.3 liters</measure> of water. Table III report the average tracking error over <measure type="value" ptr="#b74f0412-59b4-4ff1-96a1-58e18f5a8ae3">25</measure> <quantifiedObject id="b74f0412-59b4-4ff1-96a1-58e18f5a8ae3">experiments</quantifiedObject>. It can be noticed that for the <measure type="value" ptr="#59b8ae2a-73a2-467b-b773-af69ad09451e">two</measure> <quantifiedObject id="59b8ae2a-73a2-467b-b773-af69ad09451e">joints with</quantifiedObject> the highest usage during the task (i.e., shoulder roll and jaw), the contact model considerably improve the tracking accuracy (respectively of <measure type="list">2.5 • and 1.8</measure> • ). A visualization of the tracking error for the shoulder roll is shown in Figure 8. However, for the other <measure type="value" ptr="#e4c91feb-3385-48d6-8f95-bccb2427a084">two</measure> <quantifiedObject id="e4c91feb-3385-48d6-8f95-bccb2427a084">joints</quantifiedObject> we observed a small (&lt; <measure type="interval">0.25 •</measure> ) decrease of the tracking performance. Overall, these results suggest that the contact model is capable of some degree of generalization to novel obstacles with different properties (e.g., weight).</p>
	<p>We demonstrate on a pushing task that our learned model substantially improve the tracking performance in presence of unknown obstacles. The estimation from the learned model does not rely on dynamic parameters, but it is completely data-driven: uncalibrated tactile sensors provide raw information about the contact, while force/torque sensors provide information about the wrenches perceived by the robotic structure. As a result, our approach does not require a spatially calibrated model of the skin. We believe that this feature is particularly relevant with the increasing availability of miniaturized skin sensors. For future robot skin, composed of <measure type="list">thousands or millions</measure> of sensors, it would be extremely challenging and time consuming to perform a full spatial calibration. Our approach is a first step toward the use of learning methods to alleviate this problem.</p></text>